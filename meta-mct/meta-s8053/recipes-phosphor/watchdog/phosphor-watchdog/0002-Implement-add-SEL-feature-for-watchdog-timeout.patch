From 01b84ed6afe322a31563a88b4b1aa0e5488017a2 Mon Sep 17 00:00:00 2001
From: Osmond Chen <osmond.chen@mic.com.tw>
Date: Fri, 11 Mar 2022 15:40:01 +0800
Subject: [PATCH] Implement add SEL feature for watchdog timeout

---
 src/watchdog.cpp | 69 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 src/watchdog.hpp |  3 +++
 2 files changed, 72 insertions(+)

diff --git a/src/watchdog.cpp b/src/watchdog.cpp
index 23d848f..5e96dd1 100755
--- a/src/watchdog.cpp
+++ b/src/watchdog.cpp
@@ -365,6 +365,7 @@ void Watchdog::timeOutHandler()
             }
         }
     }
+    addWatchdogSEL(action,expiredTimerUse());
 
     tryFallbackOrDisable();
 }
@@ -392,5 +393,73 @@ void Watchdog::tryFallbackOrDisable()
     WatchdogInherits::enabled(false);
 }
 
+void Watchdog::addWatchdogSEL(Base::Watchdog::Action action,Base::Watchdog::TimerUse timeUse){
+
+    static constexpr auto SEL_LOGGER_SERVICE =
+        "xyz.openbmc_project.Logging.IPMI";
+    static constexpr auto SEL_LOGGER_ROOT =
+        "/xyz/openbmc_project/Logging/IPMI";
+    static constexpr auto SEL_LOGGER_INTERFACE =
+        "xyz.openbmc_project.Logging.IPMI";
+    static constexpr auto SEL_LOGGER_METHOD = "IpmiSelAdd";
+    static constexpr const uint16_t ipmiBMCSlaveAddr = 0x20;
+
+    uint8_t eventData1=0xff;
+    uint8_t eventData2=0xff;
+    switch (action)
+    {
+        case Action::None:
+            eventData1 = 0;
+            break;
+        case Action::HardReset:
+            eventData1 = 1;
+            break;
+        case Action::PowerOff:
+            eventData1 = 2;
+            break;
+        case Action::PowerCycle:
+            eventData1 = 3;
+            break;
+    }
+
+    switch (timeUse)
+    {
+        case TimerUse::Reserved:
+            eventData2 = 0;
+            break;
+        case TimerUse::BIOSFRB2:
+            eventData2 = 1;
+            break;
+        case TimerUse::BIOSPOST:
+            eventData2 = 2;
+            break;
+        case TimerUse::OSLoad:
+            eventData2 = 3;
+            break;
+        case TimerUse::SMSOS:
+            eventData2 = 4;
+            break;
+        case TimerUse::OEM:
+            eventData2 = 5;
+            break;
+    }
+
+    try
+    {
+        auto method =
+            bus.new_method_call(SEL_LOGGER_SERVICE, SEL_LOGGER_ROOT,
+                                SEL_LOGGER_INTERFACE, SEL_LOGGER_METHOD);
+        method.append("watchdog: Timed out",
+                      "/xyz/openbmc_project/sensors/watchdog/WATCHDOG2",
+                      std::vector<uint8_t>({eventData1, eventData2, 0xFF}), true,
+                      ipmiBMCSlaveAddr);
+        bus.call_noreply(method);
+    }
+    catch (const SdBusError& e)
+    {
+        log<level::ERR>(e.what());
+    }
+}
+
 } // namespace watchdog
 } // namespace phosphor
diff --git a/src/watchdog.hpp b/src/watchdog.hpp
index f516a77..2f30d0b 100755
--- a/src/watchdog.hpp
+++ b/src/watchdog.hpp
@@ -194,6 +194,9 @@ class Watchdog : public WatchdogInherits
     /** @brief Attempt to enter the fallback watchdog or disables it */
     void tryFallbackOrDisable();
 
+    /** @brief Add a watchdog SEL to SEL list  */
+    void addWatchdogSEL(Base::Watchdog::Action action,Base::Watchdog::TimerUse timeUse);
+
     /** @brief Object path of the watchdog */
     std::string_view objPath;
 };
-- 
2.7.4

